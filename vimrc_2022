" plug autoinstalltion
if empty(glob("~/.vim/autoload/plug.vim"))
   execute '!mkdir -p ~/.vim/autoload'
   execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

inoremap jj <ESC>
nmap <c-x> :silent! python3 import re,vim,subprocess;subprocess.call(['tmux', 'send-keys', '-t', '1', re.sub(r';\s*$', '\\;', vim.current.line).replace('\t',' '), 'enter'])<cr>j
vmap <c-x> :silent! python3 import re,vim,subprocess;subprocess.call(['tmux', 'send-keys', '-t', '1', re.sub(r';\s*$', '\\;', '\n'.join(vim.current.range)).replace('\t',' '), 'enter'])<cr>
"set bg=dark

call plug#begin()
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree'
Plug 'fatih/vim-go'
Plug 'majutsushi/tagbar'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'stephpy/vim-yaml'
Plug 'pedrohdz/vim-yaml-folds'
Plug 'will133/vim-dirdiff'
Plug 'joe-skb7/cscope-maps'
"Plug 'daylerees/colour-schemes', {'rtp':'vim'}
" comment with gcc
Plug 'tomtom/tcomment_vim'
Plug 'towolf/vim-helm'  " breaks expandtab,ts,tw for yaml

" LSP 
Plug 'prabirshrestha/vim-lsp'
"vim-lsp-settings breaks c-d scrolling !!!!
Plug 'mattn/vim-lsp-settings'

call plug#end()

set termguicolors
set t_Co=256
set term=xterm-256color


" dir diff
"set splitbelow
set foldlevel=99

nnoremap <F2> :NERDTreeToggle<CR>
let g:go_version_warning = 0
map <F3> :CtrlPBufTag<CR>
map <F4> :let g:ctrlp_mruf_relative=1<bar>CtrlPMRUFiles<CR>
map <leader><F4> :let g:ctrlp_mruf_relative=0<bar>CtrlPMRUFiles<CR>
map <F5> :CtrlPTag<CR>
set nocompatible
set backspace=indent,eol,start
set nowrap
set noswapfile

" S for subsitute inner word from yanked text
" change inner word and in insert mode yank from " and exit inster mode :)
nnoremap <leader>s "_ciw<c-r>"<esc>
vnoremap <leader>s "_dP

" Run last commend in 1 tmux window
nmap <leader>r :up<bar>python3 import vim,subprocess;subprocess.call(['tmux', 'send-keys', '-t', '1', 'c-p', 'enter'])<cr>

"nmap <leader>R :up<bar>python3 import vim,subprocess;subprocess.call(['tmux', 'send-keys', '-t', '1', ', 'c-p', 'enter'])<cr>

" Ipython
nmap <leader>ip o__import__('IPython').embed()<ESC>:w<cr>
nmap <leader>ib o__import__('ipdb').set_trace()<ESC>:w<cr>

au FileType json set foldmethod=syntax

" FOR asyncio code
" https://stackoverflow.com/questions/56415470/calling-ipython-embed-in-asynchronous-code-specifying-the-event-loop
" import os;
" os.system('pip install IPython nest-asyncio')
" import nest_asyncio
" nest_asyncio.apply()
" __import__('IPython').embed(using='asyncio')


map <leader>h "ayiw:Ag! -- "<C-r>a"
vmap <leader>h "ay:Ag! -- "<C-r>a"
map <leader>H "ayiw:Ag! --all-types -- "<C-r>a"
vmap <leader>H "ay:Ag! --all-types -- "<C-r>a"
""" ------ sudo write
command! W w !sudo tee % > /dev/null

function! Mouseon()
    set mouse=a
    " for better scrolling when using the mouse
    set scrolloff=2
    " Toolbar
    " set guioptions+=T 
    " for better golang navigation
    " TO PSUJE scrollowanie
    map <C-LeftMouse> gd 
    nmap <RightMouse> <c-o>

    nmap <2-LeftMouse> gd
    " nmap <expr> <2-LeftMouse> (&buftype is# "quickfix" ? "" : "gd")
endfunction
call Mouseon()

map <silent> <F2> :NERDTreeToggle<CR>
map <silent> <leader><F2> :NERDTreeFind<CR>
let NERDTreeShowBookmarks = 0
let NERDChristmasTree = 0
" set Enter/Return to activate a node
let NERDTreeMapActivateNode='<CR>'
" always change CWD
let NERDTreeChDirMode = 2
" more colors 
let NERDTreeMinimalUI = 1
"let NERDTreeDirArrows=1
let NERDTreeQuitOnOpen = 0
let NERDTreeIgnore = ['\.pyc$', '\~$', '\.o$', '__pycache__', '_test\.go$']

let NERDTreeMouseMode = 3

nnoremap <leader>f *N
" for visual use //
set hlsearch
map <leader>/ :nohlsearch<cr>

""" tagbar
map <leader><F3> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 0
let g:tagbar_width = 80

""" ctags
map <F8> :!ctags --verbose=no --totals --recurse=yes<cr>
map <leader><F8> :!/root/ppalucki/dotfiles/cscope_gen.sh<cr>:cscope kill -1<cr>:cscope add cscope.out<cr>:cscope show<cr>

""" cscope
" http://cscope.sourceforge.net/cscope_maps.vim
" http://cscope.sourceforge.net/cscope_vim_tutorial.html
" generate tags ~/ppalucki/dotfiles/cscope_gen.sh
" use copen instead of query dialog
" The following maps all invoke one of the following cscope search types:
" ctrl-\ (current window) then:
" ctrl-spacebar (vertical split) then:
" ctrl-space-space (horizonatl split) then:
"   's'   symbol: find all references to the token under cursor
"   'g'   global: find global definition(s) of the token under cursor
"   'c'   calls:  find all calls to the function name under cursor
"   't'   text:   find all instances of the text under cursor
"   'e'   egrep:  egrep search for the word under cursor
"   'f'   file:   open the filename under cursor
"   'i'   includes: find files that include the filename under cursor
"   'd'   called: find functions that function under cursor calls
"use [q ]q or copen for navigation
set cscopequickfix=s-,g-,d-,c-


""" move between windows
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-l> <C-W>l
nmap <C-h> <C-W>h

let mapleader = "\\"
map <space> \
filetype plugin indent on
syntax on
set hidden
""" ---- saveall shortcut
map ZA :wall<CR>
map ZW :qa<CR>
""" write/quit
" aka ZZ
map <leader>w :up<CR>
map <leader>W :w!<CR>
map <leader>q :q<CR>
" " aka ZQ
map <leader>Q :q!<CR>

" Jump to next/previous merge conflict marker [C conflicts with vim-unimparied
nnoremap <silent> ]d /\v^(\<\|\=\|\>){7}([^=].+)?$<CR>
nnoremap <silent> [d ?\v^(\<\|\=\|\>){7}([^=].+)\?$<CR>

augroup resCur
  autocmd!
  autocmd BufWinEnter * call setpos(".", getpos("'\""))
augroup END

" Open last/alternate buffer
noremap <Leader><Leader> <C-^>
noremap <Leader><space> <C-^>
" " 'edit alternate file' convenience mapping
"nnoremap <BS> <C-^>
"
" search search raw text plain [find]
" http://vim.wikia.com/wiki/Searching_for_expressions_which_include_slashes
command! -nargs=1 SS let @/ = '\V'.escape(<q-args>, '/\')|normal! /<C-R>/<CR>

" visual search selected text [find]
" http://vim.wikia.com/wiki/Search_for_visually_selected_text
" vnoremap // y/<C-R>"<CR>"
vnoremap // y:SS <C-R>"<CR>

""" -------------------------------------------
""" Search ^ Replace in single files
""" -------------------------------------------
" replace normal mode with last searched element elmenet
" nmap <leader>y :.,$s///gc<left><left><left>
nmap <leader>y :%s///gc<left><left><left>
" replace last search element ("/ register) in given selection
vmap <leader>y :s///gc<left><left><left>

" default size to see full folder names
let g:NERDTreeWinSize=60

nmap cp :let @" = expand("%:p")<bar>echo @"<cr>

silent colorscheme slate
hi Comment guifg=#888888

""" Fugitive 
map <leader>c :Git<cr>
map <leader>d :Gdiffsplit!<cr>


""" LSP

""" CPP
au FileType cpp set ts=4 sw=4 et
au FileType cmake set ts=4 sw=4 et

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)

    "nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    "nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    " autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" enable lsp on startup (1) or disable (0)
let g:lsp_auto_enable = 0


""" vim-helm
au FileType helm set ts=2 sw=2 et
call tcomment#type#Define('helm','# %s')


""" Trailing space remove
" https://vi.stackexchange.com/questions/454/whats-the-simplest-way-to-strip-trailing-whitespace-from-all-lines-in-a-file
"Remove all trailing whitespace by pressing F12
nnoremap <F12> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

