###########################
# error handling
##########################
snippet errf "if err != nil { log.Fatalln('err:', err)}"
if err != nil {
	log.Fatalln("${1:Fatal} error:", err)
}
${0}
endsnippet

snippet errF "if err != nil { log.Fatalf('err: %s, err)}"
if err != nil {
	log.Fatalf("${1:Fatal} error: %s\n", err)
}
${0}
endsnippet

snippet tf "if err != nil { t.Fatalln('err:', err)}"
if err != nil {
	t.Fatalf("${1:Fatal} error: %s\n", err)
}
${0}
endsnippet

###########################
# convey
##########################
snippet impc "import convey"
. "github.com/smartystreets/goconvey/convey"
endsnippet

snippet so "So(Equal)"
So(${1:got}, ShouldEqual, ${2:expected})
endsnippet

snippet sor "So(Resemble)"
So(${1:got}, ShouldResemble, ${2:expected})
endsnippet

snippet son "So( BeNil )"
So(${1:nil}, ShouldBeNil)
endsnippet

snippet sonn "So(, NotBeNil )"
So(${1:nil}, ShouldNotBeNil)
endsnippet

snippet se "ShouldEqual"
ShouldEqual
endsnippet

snippet sr "ShouldResemble"
ShouldResemble
endsnippet

snippet conv "Convey()"
Convey("${1:description}", t, func(){
	$2
})
endsnippet

###########################
# builtin functions
##########################
snippet ap "append"
append(${1:slice}, ${0:value})
endsnippet


##########################
# flow control
#########################

snippet br "break"
break
endsnippet

snippet cs
case ${1:value}:
	${0}
endsnippet

snippet cont "continue"
continue
endsnippet

snippet def
defer ${0:func}()
endsnippet

##########################
# keywords structs/break/continu
#########################

snippet var "var name Type"
var ${1:name} ${2:Type}
endsnippet

snippet pack "package"
package ${1:main}
${0}
endsnippet

snippet const
const ${1:NAME} = ${0:0}
endsnippet

snippet const( "const ( iota)"
const (
	${1:NAME1} = iota
	${0:NAME2}
)
endsnippet

snippet im "import"
import
endsnippet

snippet import "import ()"
import (
	"${1:package}"
)
endsnippet

# interface
snippet int "interface"
interface
endsnippet

snippet interface "interface {}"
interface{
	$1
}
$0
endsnippet

snippet str "struct"
struct
endsnippet

snippet struct "struct {}"
struct{
	$1
}
$0
endsnippet

###########################
# slices/channels/literals
##########################

snippet ch "channel"
chan ${0:int}
endsnippet

###########################
# builtin types
##########################
snippet bo "bool"
bool
endsnippet

snippet by "byte"
byte
endsnippet

snippet in "int"
int
endsnippet

snippet i6 "int64"
int64
endsnippet

snippet fa "false"
false
endsnippet

snippet tr "true"
true
endsnippet

snippet fl "float32"
float32
endsnippet

snippet f3 "float32"
float32
endsnippet

snippet f6 "float64"
float64
endsnippet

snippet st
string
endsnippet

