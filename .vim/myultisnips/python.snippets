snippet main "main" b
if __name__ == '__main__':
	${1}
endsnippet

snippet str "str" b
def __str__(self):
	return '%s(%s)'%(self.__class__.__name__, id(self)${1})

endsnippet

snippet unicode "unicode" b
def __unicode__(self):
	return u'%s(%s)'%(self.__class__.__name__, id(self)${1})

endsnippet

snippet repr "just repr function" b!
def __repr__(self):
	return '%s(%s)'%(self.__class__.__name__, id(self)${1})

endsnippet

snippet init "init" b
def __init__(self$1):
	${2:${VISUAL:pass}}		

endsnippet

snippet super "super" b
super(${1:Class}, self).`!v tagbar#currenttag('%s','')`(${2})
endsnippet


snippet def "function" b!
def ${1:foo}($2):
    ${3:${VISUAL:pass}}
    $4

endsnippet


snippet dem "method" b
def ${1:foo}(self${2}):
    ${3:${VISUAL:pass}}
    $4

endsnippet


snippet cls "class with init without docsstrings" b
class ${1:Foo}(${2:object}):

    def __init__(self$3):
        ${4:pass}

endsnippet


snippet enc "encoding" b
# coding: utf-8
endsnippet


snippet doc "docstring" b
"""${VISUAL}${1}"""
endsnippet


snippet mdoc "docstring" b
"""
${VISUAL}${1}
"""
${2}		
endsnippet


snippet pres "print_result" b
from getmedia.system.tools import print_result
print_result(${1})
endsnippet

snippet classmethod "classmethod with function" b
@classmethod
def ${1:foo}(cls${2}):
    ${3:pass}
endsnippet

snippet staticmethod "classmethod with function" b
@staticmethod
def ${1:foo}(${2}):
    ${3:pass}
endsnippet

snippet Test "TestCase class" b
class ${1}TestCase(TestCase):
	${3:pass}
endsnippet

snippet setup "TestCase setUp" b
def setUp(self):
    super(${1}, self).setUp()
    ${2}
endsnippet

snippet teardown "TestCase teardown" b
def tearDown(self):
    super(${1}, self).tearDown()
    ${2}
endsnippet

snippet initsup "init with super" b
def __init__(self, *args, **kwargs):
    super(${1:Class}, self).__init__(*args, **kwargs)
    ${2}
endsnippet

snippet try "Visual(Try / Except)" b!
try:
	${1:${VISUAL:pass}}
except ${3:Exception} as e:
	${3:raise}
endsnippet


snippet for "For loop" b!
for ${2:item} in ${2:collection}:
	$4
endsnippet


snippet test "test function" b!
def test_${1:foo}(self):
    ${2:${VISUAL:pass}}
    $4

endsnippet

snippet isnn "is not None" w
is not None
endsnippet

snippet . "self"
self.
endsnippet


snippet log "log = getLogger(__name__)"
import logging
log = logging.getLogger(__name__)
endsnippet

