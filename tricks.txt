--------------------------- VBox
VBoxManage internalcommands sethduuid /path/to/virtualdisk.vdi

------------------------ Putty
xterm-256color
for ((color = 0; color <= 255; color++)); do tput setaf "$color"; printf "test"; done

--------------------------------
vi /etc/modules 
vboxsf

vi /etc/fstab
Documents   /home/dev/Documents vboxsf  uid=dev,gid=dev,dmode=774,fmode=664 0       1

### nie dzizlaa
* ------------------------------- docker centos without sudo centos 
* sudo usermod -aG docker ppalucki
chmod o+rw /var/run/docker.socket


# sort images by size
docker images --format '{{.Size}}\t{{.Repository}}\t{{.Tag}}\t{{.ID}}' | sed 's/ //' | sort -h -r | column -t

###  --------------------------------- tmux
setw -g mode-keys vi
set-option -g allow-rename off
set mode-mouse on
set mouse-resise-pane on 
set mouse-select-pane on


### ------------------------------ mnt tmpfs for glide
sudo mount -o size=16G -t tmpfs none /mnt/tmpfs

### --------------------------- dhcp to enable at boot set BOOT=yes
vim /etc/sysconfig/network-scripts/ifcfg-eno1

### -------------------------------- docker  detach keys again and again
#'ctrl-p,ctrl-q in an escape for detach '

mkdir -o ~/.docker
cat >~/.docker/config.json <<EOF
{
    "detachKeys": "ctrl-q,ctrl-q"
}
EOF

or just
docker exec -ti --detach-keys 'ctrl-q,ctrl-q' cassandra-test cqlsh


------------------------------ monitoring 
sudo docker run -d --cap-add SYS_PTRACE -v /proc:/host/proc:ro -v /sys:/host/sys:ro -v /var/run/docker.sock:/var/run/docker.sock --rm --name netdata -p 19999:19999 titpetric/netdata

#---------------------------------------- vim go
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
vim ~/.vimrc
call plug#begin('~/.vim/plugged')
Plug 'fatih/vim-go'
call plug#end()
:PlugInstall


#------------------------------ load grafana
./toplev.py -C0,8 -l3 -I 5000 -x, -v --quiet sleep inf 2>&1   | awk  -F ',' '{print "toplevel,name=" $3 ",core=" $2, "value=" $4}' | xargs -i -n1  curl -i -XPOST 'http://172.16.0.2:8086/write?db=database' --data-binary "{}" -q


# ------------------------------- golang


# compile depedencies and compile all tests
mkdir -p build/tests
pushd build/tests
for i in `go list ../../integration_tests/...`; do go test -i $i; done
for i in `go list ../../integration_tests/...`; do go test -c $i; done
popd
for i in `ls build/tests/`; do ./build/tests/$i; done


# --------------------------- centos disk free problem
xfs_fsr -v

# ------------------------ date uis
date -uIs

date -uIs
2017-03-23T12:41:30+0000

date -I


# -------------------------- python tricks
python -m site
python -m json
python -m SimpleHTTPServer
sudo pip install --upgrade --force-reinstall setuptools pip
sudo pip install --upgrade --force-reinstall ipython

pprint(vars(object))

# ------------------------ jupyter/ipytjon
from IPython.core.display import display, HTML
display(HTML("<style>.container { width:100% !important; }</style>"))


# -------------------- powerpoint problems with authorization/login e.g. grafana
https://support.microsoft.com/en-us/help/838028/how-documents-are-opened-from-a-web-site-in-office-2003

solve:
- enable autologin or anonymous access


# X11-------------------------------------
centos7
yum install -y xauth xclock

yum install -y epel-release
yum install -y xsensors
yum install -y hwloc

yum install liberation-* chromium

centos7 tricks https://wiki.mikejung.biz/CentOS_7

# intel memory latency checker
https://software.intel.com/en-us/articles/intelr-memory-latency-checker


# linux VIF vs NIC 
#  ls -l /sys/class/net/
lrwxrwxrwx. 1 root root 0 Aug 16 11:01 eno1 -> ../../devices/pci0000:00/0000:00:19.0/net/eno1
lrwxrwxrwx. 1 root root 0 Aug 16 11:01 enp2s0 -> ../../devices/pci0000:00/0000:00:1c.2/0000:02:00.0/net/enp2s0
lrwxrwxrwx. 1 root root 0 Aug 16 11:01 lo -> ../../devices/virtual/net/lo


# -



#### ssh-copy-id to root
cat ~/.ssh/id_rsa.pub | ssh someuser@192.168.1.25 "sudo mkdir /root/.ssh; sudo tee -a /root/.ssh/authorized_keys"

#### mesos deps
sudo yum groupinstall -y "Development Tools"
sudo yum -y install apr-devel
sudo yum -y install curl-devel
sudo yum -y install cyrus-sasl-devel
sudo yum -y install cyrus-sasl-md5
sudo yum -y install subversion-devel
sudo yum -y install libffi-devel

#### wxpython deps
yum install gstreamer-plugins-base-devel

#### sshrc
https://github.com/taylorskalyo/sshrc
wget https://raw.githubusercontent.com/taylorskalyo/sshrc/master/sshrc
chmod +x sshrc
sudo mv sshrc /usr/local/bin #or anywhere else on your PATH

### virsh 
eval `/usr/bin/resize`

### authorize qemu for vagrant
# https://bugzilla.redhat.com/show_bug.cgi?id=1437933
sudo usermod --append --groups libvirt `whoami`

### openshift
# restart job
oc  --namespace=logging get job openshift-ansible-logging-job -ojson | jq 'del(.spec.selector)' | jq 'del(.spec.template.metadata.labels)' | oc  --namespace=logging replace --force -f -



########## vim python 3.6 on centos
./configure --enable-fail-if-missing --enable-python3interp vi_cv_path_python3=/usr/bin/python3.6 --with-python-config-dir=/usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu


############# apropos losf, fuser, netstat, ss 


###  Prometheus


# Query about all metrics.

{__name__=~".+"}


################ mesos & aurora
pip install black pygments
aurora job inspect --raw --bind user=root local/root/devel/redis re.aurora | black -q - | pygmentize -l python

### NTP 
sudo ntpdate -v corp.intel.com


############ ansible

# merge dicsts
ANSIBLE_HASH_BEHAVIOUR=merge ansible-playbook

# adhoc + console + facts
export ANSIBLE_CACHE_PLUGIN_CONNECTION=/tmp/ansible_fact_caching ANSIBLE_CACHE_PLUGIN=jsonfile
ansible localhost -msetup
ansible localhost -mdebug -avar=ansible_default_ipv4.address
ansible localhost -msetup -afilter='ansible_processor_*' -o
ansible all -i inventory.ini -msetup -afilter='ansible_processor_*' -o
ansible all -i inventory.ini -mdebug -avar=ansible_processor_count
ansible all -i inventory.ini -mdebug -avar=ansible_processor_vcpus

# output as json
ANSIBLE_LOAD_CALLBACK_PLUGINS=1 ANSIBLE_STDOUT_CALLBACK=json ansible all -i inventory.ini -mdebug -avar=ansible_processor_vcpus

ANSIBLE_CACHE_PLUGIN_CONNECTION=/tmp/ans_cache.json ANSIBLE_CACHE_PLUGIN=jsonfile ansible-console host -i inventory.ini

# faster ansible
ANSIBLE_CACHE_PLUGIN_CONNECTION=/tmp/ansible-caches ANSIBLE_CACHE_PLUGIN=jsonfile ANSIBLE_CALLBACK_WHITELIST=profile_tasks 

anisble-config list
anisble-config dump

# BETTER output always formated output + timers
ANSIBLE_STDOUT_CALLBACK=debug ANSIBLE_CALLBACK_WHITELIST=profile_tasks,profile_roles,timer,debug ansible-playbook


```

```


################################################ print everything and cat it
find . -type f -print -exec cat {} \;

############################################# pipenv
pipenv --three install ipython influxdb --skip-lock
pipenv run ipython

#################################### steam
DISPLAY=127.0.0.1:0 docker run --privileged --net host -d -v ~/.Xauthority:/root/.Xauthority -v  ~/.Xauthority:/home/steam/.Xauthority --name steam3 --env="DISPLAY" --net=host ubuntu sleep inf
DISPLAY=127.0.0.1:0 xfwm4
sudo /usr/bin/X



################# centos ntfs
yum install -y ntfs-3g


################################# pycharm java render html/rest prism java extenssion
### PAWEL PALUCKI sacre was here: use my fixed JDK that has PRISM/GLX and can render
# use            /usr/java/jdk1.8.0_121/jre/bin/java
# from alternatives --config java
JDK=""


######################### ansible set_trace
https://stackoverflow.com/questions/42417079/how-to-debug-ansible-issues
import sys;sys.stdin = open('/dev/tty'); import pdb; pdb.set_trace()


############ kube dashboard from kubespray
at https://127.0.0.1:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/cronjob?namespace=default
#kubectl get secrets --namespace=kube-system kubernetes-dashboard-token-qx6pw -o json | jq '.data.token' -r | base64 -d
#kubectl create clusterrolebinding moj-dashbord-moze-wszystko --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard
# from https://github.com/kubernetes/dashboard/wiki/Creating-sample-user
kubectl create serviceaccount sample-admin-user -n kube-system
kubectl create clusterrolebinding sample-admin-user-can-do-anything --clusterrole=cluster-admin --serviceaccount=kube-system:sample-admin-user -n kube-system
kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep sample-admin-user | awk '{print $1}')



######### Pipfile + jq
# aka pip freeze
cat Pipfile.lock | jq '((.default | to_entries)[], (.develop | to_entries)[]) | "\(.key)\(.value.version)"' -r


### yum dependecies
yum deplist openssl
repoquery --requires --resolve zlib
rpm -q --whatrequires openssl
repoquery -l zlib
repoquery -l librdkafka-devel
repoquery -l librdkafka1
